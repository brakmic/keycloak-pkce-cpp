# Basic NGINX configuration
worker_processes 1;
error_log logs/error.log debug;

events {
    worker_connections 1024;
}

http {
    # Add MIME types and default settings
    include mime.types;
    default_type application/octet-stream;
    
    # OpenResty Lua settings
    lua_package_path '${prefix}/?.lua;;';
    lua_code_cache on;
    
    # Shared memory zones
    lua_shared_dict init_state 1m;
    lua_shared_dict pkce_state 1m;

    # SSL global settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_buffer_size 4k;
    
    # Initialize PKCE client
    init_by_lua_block {
        -- Load module
        local ok, KeycloakPKCE = pcall(require, "keycloak_pkce")
        if not ok then
            ngx.log(ngx.ERR, "Failed to load PKCE module:", KeycloakPKCE)
            return
        end
        
        -- Store in package global (preserved across requests when code cache is on)
        package.loaded.pkce_instance = KeycloakPKCE.new(
            "config/library_config.json"
        )
        
        -- Set proxy first (like in C demo)
        if not package.loaded.pkce_instance:set_proxy("host.docker.internal", 9443) then
            ngx.log(ngx.ERR, "Failed to set proxy")
            return
        end
        
        -- Initialize PKCE instance
        if not package.loaded.pkce_instance:init() then
            ngx.log(ngx.ERR, "Failed to initialize PKCE")
            return
        end
        
        -- Set redirect URI last
        if not package.loaded.pkce_instance:set_redirect_uri(
            "https://pkce-client.local.com:18080/auth/keycloak/callback"
        ) then
            ngx.log(ngx.ERR, "Failed to set redirect URI")
            return
        end
        
        ngx.log(ngx.INFO, "PKCE initialization complete")
    }

    server {
        listen 0.0.0.0:18080 ssl;
        server_name pkce-client.local.com;

        # SSL configuration
        ssl_certificate     certs/client/pkce-client.lua.pem;
        ssl_certificate_key certs/client/pkce-client.lua.key;
        
        # Enhanced logging
        error_log logs/ssl_error.log debug;
        access_log logs/access.log combined;

        # Make PKCE client available in request context
        rewrite_by_lua_block {
            -- Use the persistent instance
            ngx.ctx.pkce = package.loaded.pkce_instance
        }

        # Authentication endpoints
        location = /auth/keycloak {
            default_type text/html;
            content_by_lua_block {
                local pkce = ngx.ctx.pkce
                if not pkce then
                    ngx.log(ngx.ERR, "PKCE client not available")
                    ngx.status = 500
                    ngx.say("Server configuration error")
                    return
                end

                local ok, url = pcall(function()
                    return pkce:get_auth_url()
                end)

                if not ok then
                    ngx.log(ngx.ERR, "Failed to generate auth URL: ", url)
                    ngx.status = 500
                    ngx.say("Authentication setup failed: ", url)
                    return
                end

                ngx.log(ngx.INFO, "Redirecting to auth URL: ", url)
                return ngx.redirect(url)
            }
        }

        location = /auth/keycloak/callback {
            default_type text/html;
            content_by_lua_block {
                local pkce = ngx.ctx.pkce
                if not pkce then
                    ngx.log(ngx.ERR, "PKCE client not available")
                    ngx.redirect("/auth/error?error=server_error")
                    return
                end

                local args = ngx.req.get_uri_args()
                
                -- Debug output
                ngx.log(ngx.INFO, "Callback received with args:", 
                    require("cjson").encode(args))

                if args.error then
                    ngx.log(ngx.ERR, "Auth error from Keycloak: ", args.error)
                    ngx.redirect("/auth/error?error=" .. args.error)
                    return
                end

                if not args.code or not args.state then
                    ngx.log(ngx.ERR, "Missing code or state")
                    ngx.redirect("/auth/error?error=missing_parameters")
                    return
                end

                -- Token exchange with error capture
                local ok, tokens_or_error = pcall(function()
                    local tokens = pkce:handle_callback(args.code, args.state)
                    if not tokens or not tokens.access_token then
                        error("No tokens returned")
                    end
                    return tokens
                end)

                if not ok then
                    ngx.log(ngx.ERR, "Token exchange failed: ", tokens_or_error)
                    ngx.redirect("/auth/error?error=token_exchange_failed&details=" .. 
                        ngx.escape_uri(tostring(tokens_or_error)))
                    return
                end

                -- Set secure session cookie
                ngx.header["Set-Cookie"] = {
                    "KC_SESSION=" .. tokens_or_error.access_token .. 
                    "; Path=/; HttpOnly; Secure; SameSite=Strict"
                }
                
                ngx.log(ngx.INFO, "Token exchange successful, redirecting to protected resource")
                return ngx.redirect("/protected")
            }
        }

        location = /auth/error {
            default_type text/html;
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                local error_msg = args.error or "unknown_error"
                local details = args.details or ""
                
                ngx.status = 400
                ngx.header.content_type = "text/html"
                ngx.say(string.format([[
                    <html><body>
                    <h1>Authentication Error</h1>
                    <p>Error: %s</p>
                    <p>Details: %s</p>
                    <p><a href='/'>Return to Home</a></p>
                    </body></html>
                ]], error_msg, details))
            }
        }

                location = /protected {
            default_type text/html;
            content_by_lua_block {
                local pkce = ngx.ctx.pkce
                local token = ngx.var.cookie_KC_SESSION
                local cjson = require("cjson")
                local base64 = require("ngx.base64")

                if not token then
                    ngx.redirect("/auth/keycloak")
                    return
                end

                if not pkce:validate_session(token) then
                    ngx.redirect("/auth/error?error=invalid_session")
                    return
                end

                -- Parse JWT token parts (token is in format: header.payload.signature)
                local parts = {}
                for part in token:gmatch("[^%.]+") do
                    table.insert(parts, part)
                end

                -- Decode payload (second part)
                local padded = parts[2] .. string.rep('=', 4 - (#parts[2] % 4))
                local decoded = base64.decode_base64url(padded)
                local claims = cjson.decode(decoded)

                -- Display user information
                ngx.say([[
                    <html>
                    <head>
                        <style>
                            table { border-collapse: collapse; width: 100%; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f2f2f2; }
                        </style>
                    </head>
                    <body>
                    <h1>Protected Resource</h1>
                    <h2>Welcome ]] .. (claims.preferred_username or claims.sub) .. [[!</h2>
                    <h3>Your Claims:</h3>
                    <table>
                        <tr><th>Claim</th><th>Value</th></tr>
                ]])

                -- Display all claims in a table
                for k, v in pairs(claims) do
                    -- Handle different value types
                    local value = v
                    if type(v) == "table" then
                        value = cjson.encode(v)
                    elseif type(v) == "boolean" then
                        value = v and "true" or "false"
                    end
                    
                    ngx.say(string.format(
                        "<tr><td>%s</td><td>%s</td></tr>",
                        k, value
                    ))
                end

                ngx.say([[
                    </table>
                    <p><a href='/'>Return to Home</a></p>
                    </body></html>
                ]])
            }
        }

        location = /test {
            default_type text/plain;
            content_by_lua_block {
                -- Basic info
                ngx.say("Test endpoint")
                ngx.say("Server name: ", ngx.var.server_name)
                ngx.say("SSL Protocol: ", ngx.var.ssl_protocol)
                
                -- Init state
                local init = ngx.shared.init_state:get("initialized")
                ngx.say("Initialization state: ", init and "complete" or "incomplete")
                
                -- PKCE state
                local pkce = ngx.ctx.pkce
                ngx.say("PKCE client: ", pkce and "available" or "unavailable")
                
                ngx.flush(true)
            }
        }

        location = / {
            default_type text/html;
            content_by_lua_block {
                ngx.say([[
                    <html><body>
                    <h1>Keycloak PKCE Demo</h1>
                    <p><a href='/auth/keycloak'>Start Login</a></p>
                    <p><a href='/protected'>Protected Resource</a></p>
                    </body></html>
                ]])
            }
        }
    }
}
